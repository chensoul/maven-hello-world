name: 'Maven Release'

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "RELEASE version"
        required: false
        default: ""
      developmentVersion:
        description: "SNAPSHOT version"
        required: false
        default: ""
      autoReleaseAfterClose:
        description: "Auto release after close"
        required: false
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          java-package: 'jdk'
          cache: 'maven'
          server-id: ossrh
      - name: Configure Git User
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v6.0.0
        with:
          gpg_private_key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      - name: Verify Whether a Release is Ready
        shell: bash
        run: |
          if [ "${{ github.event.inputs.autoReleaseAfterClose }}" == "true" ] ; then
            echo "auto_release=true" >> $GITHUB_ENV
          else
            echo "auto_release=false" >> $GITHUB_ENV
          fi
      - name: Fetch Artifact Information
        shell: bash
        run: |
          # remove '-SNAPSHOT' from version
          echo "artifact_version=$(grep -m1 '<version>' pom.xml | sed 's/.*<version>\([^<]*\)<\/version>.*/\1/' | sed 's/-SNAPSHOT$//')" >> "$GITHUB_ENV"
          echo "artifact_name=$(grep -m1 '<artifactId>' pom.xml | sed 's/.*<artifactId>\([^<]*\)<\/artifactId>.*/\1/')" >> "$GITHUB_ENV"
          echo "artifact_packaging=$(grep -m1 '<packaging>' pom.xml | sed 's/.*<packaging>\([^<]*\)<\/packaging>.*/\1/')" >> "$GITHUB_ENV"
      - name: Release With Maven
        run: |
          echo "${{ env.artifact_name }} ${{ env.artifact_version }} ${{ env.artifact_packaging }}"
          if [ "${{ env.auto_release }}" == "true" ] ; then
            mvn -B -U \
            release:prepare \
            release:perform \
            -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
            -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
            deploy \
            -Prelease \
            -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }}  \
            -DautoReleaseAfterClose=${{ env.auto_release }}  \
            -s settings.xml
          else
            mvn -B -U \
            release:prepare \
            release:perform \
            -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
            -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
            deploy \
            -Prelease \
            -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }}  \
            -DautoReleaseAfterClose=${{ env.auto_release }}  \
            -s settings.xml
          fi

          ls -al ./target/
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}-${{ env.artifact_version }}
          path: ./target/${{ env.artifact_name }}-${{ env.artifact_version }}.${{ env.artifact_packaging }}
      - name: Workflow Release Notes
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: github-release
          client-payload: '{"auto_release": "${{ env.auto_release }}", "artifact": "${{ env.artifact_name }}-${{ env.artifact_version }}"}'
